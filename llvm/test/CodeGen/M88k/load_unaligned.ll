; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; Test LD instructions.
;
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88100 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88110 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s

; Loading value from pointer.

define i32 @f1(ptr %p) {
; CHECK-LABEL: f1:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.bu %r3, %r2, 0
; CHECK-NEXT:    ld.bu %r4, %r2, 1
; CHECK-NEXT:    mak %r3, %r3, 0<8>
; CHECK-NEXT:    or %r3, %r3, %r4
; CHECK-NEXT:    ld.bu %r4, %r2, 2
; CHECK-NEXT:    mak %r3, %r3, 0<8>
; CHECK-NEXT:    or %r3, %r3, %r4
; CHECK-NEXT:    ld.bu %r2, %r2, 3
; CHECK-NEXT:    mak %r3, %r3, 0<8>
; CHECK-NEXT:    or %r2, %r3, %r2
; CHECK-NEXT:    jmp %r1
  %res = load i32, ptr %p, align 1
  ret i32 %res
}

define i32 @f2(ptr %p) {
; CHECK-LABEL: f2:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.hu %r3, %r2, 0
; CHECK-NEXT:    ld.hu %r2, %r2, 2
; CHECK-NEXT:    mak %r3, %r3, 0<16>
; CHECK-NEXT:    or %r2, %r3, %r2
; CHECK-NEXT:    jmp %r1
  %res = load i32, ptr %p, align 2
  ret i32 %res
}

define i16 @f3(ptr %p) {
; CHECK-LABEL: f3:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.bu %r3, %r2, 0
; CHECK-NEXT:    ld.bu %r2, %r2, 1
; CHECK-NEXT:    mak %r3, %r3, 0<8>
; CHECK-NEXT:    or %r2, %r3, %r2
; CHECK-NEXT:    jmp %r1
  %res = load i16, ptr %p, align 1
  ret i16 %res
}

define i64 @f4(ptr %p) {
; CHECK-LABEL: f4:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.bu %r3, %r2, 4
; CHECK-NEXT:    ld.bu %r4, %r2, 5
; CHECK-NEXT:    mak %r3, %r3, 0<8>
; CHECK-NEXT:    or %r3, %r3, %r4
; CHECK-NEXT:    ld.bu %r4, %r2, 6
; CHECK-NEXT:    mak %r3, %r3, 0<8>
; CHECK-NEXT:    or %r3, %r3, %r4
; CHECK-NEXT:    ld.bu %r4, %r2, 7
; CHECK-NEXT:    mak %r3, %r3, 0<8>
; CHECK-NEXT:    or %r3, %r3, %r4
; CHECK-NEXT:    ld.bu %r4, %r2, 0
; CHECK-NEXT:    ld.bu %r5, %r2, 1
; CHECK-NEXT:    mak %r4, %r4, 0<8>
; CHECK-NEXT:    or %r4, %r4, %r5
; CHECK-NEXT:    ld.bu %r5, %r2, 2
; CHECK-NEXT:    mak %r4, %r4, 0<8>
; CHECK-NEXT:    or %r4, %r4, %r5
; CHECK-NEXT:    ld.bu %r2, %r2, 3
; CHECK-NEXT:    mak %r4, %r4, 0<8>
; CHECK-NEXT:    or %r2, %r4, %r2
; CHECK-NEXT:    jmp %r1
  %res = load i64, ptr %p, align 1
  ret i64 %res
}

define i64 @f5(ptr %p) {
; CHECK-LABEL: f5:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.hu %r3, %r2, 4
; CHECK-NEXT:    ld.hu %r4, %r2, 6
; CHECK-NEXT:    mak %r3, %r3, 0<16>
; CHECK-NEXT:    or %r3, %r3, %r4
; CHECK-NEXT:    ld.hu %r4, %r2, 0
; CHECK-NEXT:    ld.hu %r2, %r2, 2
; CHECK-NEXT:    mak %r4, %r4, 0<16>
; CHECK-NEXT:    or %r2, %r4, %r2
; CHECK-NEXT:    jmp %r1
  %res = load i64, ptr %p, align 2
  ret i64 %res
}

define i64 @f6(ptr %p) {
; CHECK-LABEL: f6:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld %r3, %r2, 4
; CHECK-NEXT:    ld %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %res = load i64, ptr %p, align 4
  ret i64 %res
}
