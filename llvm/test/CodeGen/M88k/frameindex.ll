; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; Test LD/ST instructions with frame index.
;
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88100 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88110 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s

declare void @func(ptr)

; The following function has a store and a load using a frame index.

define i32 @f0(i32 %val) {
; CHECK-LABEL: f0:
; CHECK:       | %bb.0:
; CHECK-NEXT:    subu %r31, %r31, 16
; CHECK-NEXT:    st %r30, %r31, 0
; CHECK-NEXT:    addu %r30, %r31, 0
; CHECK-NEXT:    st %r14, %r30, 4 | 4-byte Folded Spill
; CHECK-NEXT:    or %r14, %r0, %r1
; CHECK-NEXT:    add %r1, %r30, 8
; CHECK-NEXT:    st %r2, %r30, 8
; CHECK-NEXT:    or %r2, %r0, %r1
; CHECK-NEXT:    bsr func
; CHECK-NEXT:    ld %r2, %r30, 8
; CHECK-NEXT:    or %r1, %r0, %r14
; CHECK-NEXT:    ld %r14, %r30, 4 | 4-byte Folded Reload
; CHECK-NEXT:    ld %r30, %r30, 0 | 4-byte Folded Reload
; CHECK-NEXT:    addu %r31, %r31, 16
; CHECK-NEXT:    jmp %r1
  %val.addr = alloca i32, align 4
  store i32 %val, ptr %val.addr, align 4
  call void @func(ptr %val.addr)
  %res = load i32, ptr %val.addr, align 4
  ret i32 %res
}
