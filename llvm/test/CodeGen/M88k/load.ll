; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; Test LD instructions.
;
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88100 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88110 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s

@mem64 = common global i64 0, align 8
@memdouble = common global double 0.0, align 8
@mem32 = common global i32 0, align 4
@memfloat = common global float 0.0, align 4
@mem16 = common global i16 0, align 2
@mem8 = common global i8 0, align 1

; Loading value from pointer.

define i32 @f1(ptr %p) {
; CHECK-LABEL: f1:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %res = load i32, ptr %p, align 4
  ret i32 %res
}

define float @f2(ptr %p) {
; CHECK-LABEL: f2:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %res = load float, ptr %p, align 4
  ret float %res
}

define i32 @f3(ptr %p) {
; CHECK-LABEL: f3:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.bu %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %val = load i8, ptr %p, align 4
  %res = zext i8 %val to i32
  ret i32 %res
}

define i32 @f4(ptr %p) {
; CHECK-LABEL: f4:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.b %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %val = load i8, ptr %p, align 1
  %res = sext i8 %val to i32
  ret i32 %res
}

define i32 @f5(ptr %p) {
; CHECK-LABEL: f5:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.hu %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %val = load i16, ptr %p, align 2
  %res = zext i16 %val to i32
  ret i32 %res
}

define i32 @f6(ptr %p) {
; CHECK-LABEL: f6:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.h %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %val = load i16, ptr %p, align 2
  %res = sext i16 %val to i32
  ret i32 %res
}

define i64 @f7(ptr %p) {
; CHECK-LABEL: f7:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.d %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %res = load i64, ptr %p, align 8
  ret i64 %res
}

define double @f8(ptr %p) {
; CHECK-LABEL: f8:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.d %r2, %r2, 0
; CHECK-NEXT:    jmp %r1
  %res = load double, ptr %p, align 8
  ret double %res
}

; Loading value from pointer plus constant index.

define i32 @f9(ptr %p) {
; CHECK-LABEL: f9:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld %r2, %r2, 8
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i32, ptr %p, i32 2
  %res = load i32, ptr %arrayidx, align 4
  ret i32 %res
}

define float @f10(ptr %p) {
; CHECK-LABEL: f10:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld %r2, %r2, 8
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i32, ptr %p, i32 2
  %res = load float, ptr %arrayidx, align 4
  ret float %res
}

define i32 @f11(ptr %p) {
; CHECK-LABEL: f11:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.bu %r2, %r2, 2
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i8, ptr %p, i32 2
  %val = load i8, ptr %arrayidx, align 1
  %res = zext i8 %val to i32
  ret i32 %res
}

define i32 @f12(ptr %p) {
; CHECK-LABEL: f12:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.b %r2, %r2, 2
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i8, ptr %p, i32 2
  %val = load i8, ptr %arrayidx, align 1
  %res = sext i8 %val to i32
  ret i32 %res
}

define i32 @f13(ptr %p) {
; CHECK-LABEL: f13:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.hu %r2, %r2, 4
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i16, ptr %p, i32 2
  %val = load i16, ptr %arrayidx, align 2
  %res = zext i16 %val to i32
  ret i32 %res
}

define i32 @f14(ptr %p) {
; CHECK-LABEL: f14:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.h %r2, %r2, 4
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i16, ptr %p, i32 2
  %val = load i16, ptr %arrayidx, align 2
  %res = sext i16 %val to i32
  ret i32 %res
}

define i64 @f15(ptr %p) {
; CHECK-LABEL: f15:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.d %r2, %r2, 16
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i64, ptr %p, i32 2
  %res = load i64, ptr %arrayidx, align 8
  ret i64 %res
}

define double @f16(ptr %p) {
; CHECK-LABEL: f16:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.d %r2, %r2, 16
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds double, ptr %p, i32 2
  %res = load double, ptr %arrayidx, align 8
  ret double %res
}

; Loading value from pointer plus index.

define i32 @f17(ptr %p, i32 %idx) {
; CHECK-LABEL: f17:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld %r2, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i32, ptr %p, i32 %idx
  %res = load i32, ptr %arrayidx, align 4
  ret i32 %res
}

define float @f18(ptr %p, i32 %idx) {
; CHECK-LABEL: f18:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld %r2, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds float, ptr %p, i32 %idx
  %res = load float, ptr %arrayidx, align 4
  ret float %res
}

define i32 @f19(ptr %p, i32 %idx) {
; CHECK-LABEL: f19:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.bu %r2, %r2, %r3
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i8, ptr %p, i32 %idx
  %val = load i8, ptr %arrayidx, align 1
  %res = zext i8 %val to i32
  ret i32 %res
}

define i32 @f20(ptr %p, i32 %idx) {
; CHECK-LABEL: f20:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.b %r2, %r2, %r3
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i8, ptr %p, i32 %idx
  %val = load i8, ptr %arrayidx, align 1
  %res = sext i8 %val to i32
  ret i32 %res
}

define i32 @f21(ptr %p, i32 %idx) {
; CHECK-LABEL: f21:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.hu %r2, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i16, ptr %p, i32 %idx
  %val = load i16, ptr %arrayidx, align 2
  %res = zext i16 %val to i32
  ret i32 %res
}

define i32 @f22(ptr %p, i32 %idx) {
; CHECK-LABEL: f22:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.h %r2, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i16, ptr %p, i32 %idx
  %val = load i16, ptr %arrayidx, align 2
  %res = sext i16 %val to i32
  ret i32 %res
}

define i64 @f23(ptr %p, i32 %idx) {
; CHECK-LABEL: f23:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.d %r2, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i64, ptr %p, i32 %idx
  %res = load i64, ptr %arrayidx, align 8
  ret i64 %res
}

define double @f24(ptr %p, i32 %idx) {
; CHECK-LABEL: f24:
; CHECK:       | %bb.0:
; CHECK-NEXT:    ld.d %r2, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds double, ptr %p, i32 %idx
  %res = load double, ptr %arrayidx, align 8
  ret double %res
}

; Loading value from global address.

define i32 @f25() {
; CHECK-LABEL: f25:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r2, %r0, %hi16(mem32)
; CHECK-NEXT:    ld %r2, %r2, %lo16(mem32)
; CHECK-NEXT:    jmp %r1
  %res = load i32, ptr @mem32, align 4
  ret i32 %res
}

define float @f26() {
; CHECK-LABEL: f26:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r2, %r0, %hi16(memfloat)
; CHECK-NEXT:    ld %r2, %r2, %lo16(memfloat)
; CHECK-NEXT:    jmp %r1
  %res = load float, ptr @memfloat, align 4
  ret float %res
}

define i32 @f27() {
; CHECK-LABEL: f27:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r2, %r0, %hi16(mem8)
; CHECK-NEXT:    ld.bu %r2, %r2, %lo16(mem8)
; CHECK-NEXT:    jmp %r1
  %val = load i8, ptr @mem8, align 1
  %res = zext i8 %val to i32
  ret i32 %res
}

define i32 @f28() {
; CHECK-LABEL: f28:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r2, %r0, %hi16(mem8)
; CHECK-NEXT:    ld.b %r2, %r2, %lo16(mem8)
; CHECK-NEXT:    jmp %r1
  %val = load i8, ptr @mem8, align 1
  %res = sext i8 %val to i32
  ret i32 %res
}

define i32 @f29() {
; CHECK-LABEL: f29:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r2, %r0, %hi16(mem16)
; CHECK-NEXT:    ld.hu %r2, %r2, %lo16(mem16)
; CHECK-NEXT:    jmp %r1
  %val = load i16, ptr @mem16, align 2
  %res = zext i16 %val to i32
  ret i32 %res
}

define i32 @f30() {
; CHECK-LABEL: f30:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r2, %r0, %hi16(mem16)
; CHECK-NEXT:    ld.h %r2, %r2, %lo16(mem16)
; CHECK-NEXT:    jmp %r1
  %val = load i16, ptr @mem16, align 2
  %res = sext i16 %val to i32
  ret i32 %res
}

define i64 @f31() {
; CHECK-LABEL: f31:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r2, %r0, %hi16(mem64)
; CHECK-NEXT:    ld.d %r2, %r2, %lo16(mem64)
; CHECK-NEXT:    jmp %r1
  %res = load i64, ptr @mem64, align 8
  ret i64 %res
}

define double @f32() {
; CHECK-LABEL: f32:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r2, %r0, %hi16(memdouble)
; CHECK-NEXT:    ld.d %r2, %r2, %lo16(memdouble)
; CHECK-NEXT:    jmp %r1
  %res = load double, ptr @memdouble, align 8
  ret double %res
}

; CHECK: .comm   mem64,8,8
; CHECK: .comm   memdouble,8,8
; CHECK: .comm   mem32,4,4
; CHECK: .comm   memfloat,4,4
; CHECK: .comm   mem16,2,2
; CHECK: .comm   mem8,1,1
