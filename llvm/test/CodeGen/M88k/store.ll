; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;
; Test ST instructions.
;
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88100 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88110 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s

@mem64 = common global i64 0, align 8
@memdouble = common global double 0.0, align 8
@mem32 = common global i32 0, align 4
@memfloat = common global float 0.0, align 4
@memptr = common global ptr null, align 4
@mem16 = common global i16 0, align 2
@mem8 = common global i8 0, align 1

; Store value to pointer address.

define void @f1(ptr %p) {
; CHECK-LABEL: f1:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st %r0, %r2, 0
; CHECK-NEXT:    jmp %r1
  store i32 0, ptr %p, align 4
  ret void
}

define void @f2(ptr %p, i32 %val) {
; CHECK-LABEL: f2:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st %r3, %r2, 0
; CHECK-NEXT:    jmp %r1
  store i32 %val, ptr %p, align 4
  ret void
}

define void @f3(ptr %p, float %val) {
; CHECK-LABEL: f3:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st %r3, %r2, 0
; CHECK-NEXT:    jmp %r1
  store float %val, ptr %p, align 4
  ret void
}

define void @f4(ptr %p, i8 %val) {
; CHECK-LABEL: f4:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st.b %r3, %r2, 0
; CHECK-NEXT:    jmp %r1
  store i8 %val, ptr %p, align 1
  ret void
}

define void @f5(ptr %p, i16 %val) {
; CHECK-LABEL: f5:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st.h %r3, %r2, 0
; CHECK-NEXT:    jmp %r1
  store i16 %val, ptr %p, align 2
  ret void
}

define void @f6(ptr %p, i64 %val) {
; CHECK-LABEL: f6:
; CHECK:       | %bb.0:
; CHECK-NEXT:    | kill: def $r5 killed $r5 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    | kill: def $r4 killed $r4 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    st.d %r4, %r2, 0
; CHECK-NEXT:    jmp %r1
  store i64 %val, ptr %p, align 8
  ret void
}

define void @f7(ptr %p, double %val) {
; CHECK-LABEL: f7:
; CHECK:       | %bb.0:
; CHECK-NEXT:    | kill: def $r5 killed $r5 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    | kill: def $r4 killed $r4 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    st.d %r4, %r2, 0
; CHECK-NEXT:    jmp %r1
  store double %val, ptr %p, align 8
  ret void
}

; Store value to pointer plus constant index.

define void @f8(ptr %p, i32 %val) {
; CHECK-LABEL: f8:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st %r3, %r2, 8
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i32, ptr %p, i32 2
  store i32 %val, ptr %arrayidx, align 4
  ret void
}

define void @f9(ptr %p, float %val) {
; CHECK-LABEL: f9:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st %r3, %r2, 8
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds float, ptr %p, i32 2
  store float %val, ptr %arrayidx, align 4
  ret void
}

define void @f10(ptr %p, i8 %val) {
; CHECK-LABEL: f10:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st.b %r3, %r2, 2
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i8, ptr %p, i32 2
  store i8 %val, ptr %arrayidx, align 1
  ret void
}

define void @f11(ptr %p, i16 %val) {
; CHECK-LABEL: f11:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st.h %r3, %r2, 4
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i16, ptr %p, i32 2
  store i16 %val, ptr %arrayidx, align 2
  ret void
}

define void @f12(ptr %p, i64 %val) {
; CHECK-LABEL: f12:
; CHECK:       | %bb.0:
; CHECK-NEXT:    | kill: def $r5 killed $r5 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    | kill: def $r4 killed $r4 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    st.d %r4, %r2, 16
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i64, ptr %p, i32 2
  store i64 %val, ptr %arrayidx, align 8
  ret void
}

define void @f13(ptr %p, double %val) {
; CHECK-LABEL: f13:
; CHECK:       | %bb.0:
; CHECK-NEXT:    | kill: def $r5 killed $r5 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    | kill: def $r4 killed $r4 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    st.d %r4, %r2, 16
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds double, ptr %p, i32 2
  store double %val, ptr %arrayidx, align 8
  ret void
}

; Store value to pointer plus index.

define void @f14(ptr %p, i32 %idx, i32 %val) {
; CHECK-LABEL: f14:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st %r4, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i32, ptr %p, i32 %idx
  store i32 %val, ptr %arrayidx, align 4
  ret void
}

define void @f15(ptr %p, i32 %idx, float %val) {
; CHECK-LABEL: f15:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st %r4, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds float, ptr %p, i32 %idx
  store float %val, ptr %arrayidx, align 4
  ret void
}

define void @f16(ptr %p, i32 %idx, i8 %val) {
; CHECK-LABEL: f16:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st.b %r4, %r2, %r3
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i8, ptr %p, i32 %idx
  store i8 %val, ptr %arrayidx, align 1
  ret void
}

define void @f17(ptr %p, i32 %idx, i16 %val) {
; CHECK-LABEL: f17:
; CHECK:       | %bb.0:
; CHECK-NEXT:    st.h %r4, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i16, ptr %p, i32 %idx
  store i16 %val, ptr %arrayidx, align 2
  ret void
}

define void @f18(ptr %p, i32 %idx, i64 %val) {
; CHECK-LABEL: f18:
; CHECK:       | %bb.0:
; CHECK-NEXT:    | kill: def $r5 killed $r5 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    | kill: def $r4 killed $r4 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    st.d %r4, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds i64, ptr %p, i32 %idx
  store i64 %val, ptr %arrayidx, align 8
  ret void
}

define void @f19(ptr %p, i32 %idx, double %val) {
; CHECK-LABEL: f19:
; CHECK:       | %bb.0:
; CHECK-NEXT:    | kill: def $r5 killed $r5 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    | kill: def $r4 killed $r4 killed $r4_r5 def $r4_r5
; CHECK-NEXT:    st.d %r4, %r2[%r3]
; CHECK-NEXT:    jmp %r1
  %arrayidx = getelementptr inbounds double, ptr %p, i32 %idx
  store double %val, ptr %arrayidx, align 8
  ret void
}

; Store value to global address.

define void @f20(i32 %val) {
; CHECK-LABEL: f20:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r3, %r0, %hi16(mem32)
; CHECK-NEXT:    st %r2, %r3, %lo16(mem32)
; CHECK-NEXT:    jmp %r1
  store i32 %val, ptr @mem32, align 4
  ret void
}

define void @f21(float %val) {
; CHECK-LABEL: f21:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r3, %r0, %hi16(memfloat)
; CHECK-NEXT:    st %r2, %r3, %lo16(memfloat)
; CHECK-NEXT:    jmp %r1
  store float %val, ptr @memfloat, align 4
  ret void
}

define void @f22(i8 %val) {
; CHECK-LABEL: f22:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r3, %r0, %hi16(mem8)
; CHECK-NEXT:    st.b %r2, %r3, %lo16(mem8)
; CHECK-NEXT:    jmp %r1
  store i8 %val, ptr @mem8, align 1
  ret void
}

define void @f23(i16 %val) {
; CHECK-LABEL: f23:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r3, %r0, %hi16(mem16)
; CHECK-NEXT:    st.h %r2, %r3, %lo16(mem16)
; CHECK-NEXT:    jmp %r1
  store i16 %val, ptr @mem16, align 2
  ret void
}

define void @f24(i64 %val) {
; CHECK-LABEL: f24:
; CHECK:       | %bb.0:
; CHECK-NEXT:    | kill: def $r3 killed $r3 killed $r2_r3 def $r2_r3
; CHECK-NEXT:    | kill: def $r2 killed $r2 killed $r2_r3 def $r2_r3
; CHECK-NEXT:    or.u %r4, %r0, %hi16(mem64)
; CHECK-NEXT:    st.d %r2, %r4, %lo16(mem64)
; CHECK-NEXT:    jmp %r1
  store i64 %val, ptr @mem64, align 8
  ret void
}

define void @f25(double %val) {
; CHECK-LABEL: f25:
; CHECK:       | %bb.0:
; CHECK-NEXT:    | kill: def $r3 killed $r3 killed $r2_r3 def $r2_r3
; CHECK-NEXT:    | kill: def $r2 killed $r2 killed $r2_r3 def $r2_r3
; CHECK-NEXT:    or.u %r4, %r0, %hi16(memdouble)
; CHECK-NEXT:    st.d %r2, %r4, %lo16(memdouble)
; CHECK-NEXT:    jmp %r1
  store double %val, ptr @memdouble, align 8
  ret void
}

define void @f26(ptr %val) {
; CHECK-LABEL: f26:
; CHECK:       | %bb.0:
; CHECK-NEXT:    or.u %r3, %r0, %hi16(memptr)
; CHECK-NEXT:    st %r2, %r3, %lo16(memptr)
; CHECK-NEXT:    jmp %r1
  store ptr %val, ptr @memptr, align 4
  ret void
}

; CHECK: .comm   mem64,8,8
; CHECK: .comm   memdouble,8,8
; CHECK: .comm   mem32,4,4
; CHECK: .comm   memfloat,4,4
; CHECK: .comm   memptr,4,4
; CHECK: .comm   mem16,2,2
; CHECK: .comm   mem8,1,1
