; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; Test var arg functionality.
;
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88100 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s
; RUN: llc < %s -mtriple=m88k-openbsd -mcpu=mc88110 -m88k-enable-delay-slot-filler=false -verify-machineinstrs | FileCheck %s

declare void @llvm.va_start(ptr) #1
declare void @llvm.va_end(ptr)

%struct.__va_list_tag = type { i32, ptr, ptr }

define i32 @sum(i32 noundef %num_args, ...) {
; CHECK-LABEL: sum:
; CHECK:       | %bb.0: | %entry
; CHECK-NEXT:    subu %r31, %r31, 56
; CHECK-NEXT:    add %r10, %r31, 24
; CHECK-NEXT:    st %r3, %r10, 4
; CHECK-NEXT:    st.d %r4, %r10, 8
; CHECK-NEXT:    st.d %r6, %r10, 16
; CHECK-NEXT:    st.d %r8, %r10, 24
; CHECK-NEXT:    st %r2, %r31, 20
; CHECK-NEXT:    st %r0, %r31, 16
; CHECK-NEXT:    add %r2, %r31, 4
; CHECK-NEXT:    or.u %r3, %r0, 1
; CHECK-NEXT:    st %r3, %r2, 0
; CHECK-NEXT:    add %r3, %r31, 56
; CHECK-NEXT:    st %r3, %r2, 4
; CHECK-NEXT:    add %r3, %r31, 24
; CHECK-NEXT:    st %r3, %r2, 8
; CHECK-NEXT:    ld %r2, %r31, 16
; CHECK-NEXT:    addu %r31, %r31, 56
; CHECK-NEXT:    jmp %r1
entry:
  %num_args.addr = alloca i32, align 4
  %val = alloca i32, align 4
  %ap = alloca %struct.__va_list_tag, align 4
  %i = alloca i32, align 4
  store i32 %num_args, ptr %num_args.addr, align 4
  store i32 0, ptr %val, align 4
  call void @llvm.va_start(ptr %ap)
  call void @llvm.va_end(ptr %ap)
  %0 = load i32, ptr %val, align 4
  ret i32 %0
}
