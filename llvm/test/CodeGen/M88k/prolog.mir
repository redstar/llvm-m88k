# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -mtriple=m88k -run-pass=prologepilog -verify-machineinstrs -o - %s | FileCheck %s
--- |
  source_filename = "sha.c"
  target datalayout = "E-m:e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-a:8:16-n32"
  target triple = "m88k-unknown-openbsd"

  %struct.SHA_INFO = type { [5 x i32], i32, i32, [16 x i32] }

  define dso_local void @sha_init(ptr nocapture noundef writeonly %sha_info) local_unnamed_addr #0 {
  entry:
    store i32 1732584193, ptr %sha_info, align 4, !tbaa !6
    %arrayidx2 = getelementptr inbounds [5 x i32], ptr %sha_info, i32 0, i32 1
    store i32 -271733879, ptr %arrayidx2, align 4, !tbaa !6
    %arrayidx4 = getelementptr inbounds [5 x i32], ptr %sha_info, i32 0, i32 2
    store i32 -1732584194, ptr %arrayidx4, align 4, !tbaa !6
    %arrayidx6 = getelementptr inbounds [5 x i32], ptr %sha_info, i32 0, i32 3
    store i32 271733878, ptr %arrayidx6, align 4, !tbaa !6
    %arrayidx8 = getelementptr inbounds [5 x i32], ptr %sha_info, i32 0, i32 4
    store i32 -1009589776, ptr %arrayidx8, align 4, !tbaa !6
    %count_lo = getelementptr inbounds %struct.SHA_INFO, ptr %sha_info, i32 0, i32 1
    store i32 0, ptr %count_lo, align 4, !tbaa !10
    %count_hi = getelementptr inbounds %struct.SHA_INFO, ptr %sha_info, i32 0, i32 2
    store i32 0, ptr %count_hi, align 4, !tbaa !12
    ret void
  }

  declare void @_Unwind_SjLj_Register(ptr)

  declare void @_Unwind_SjLj_Unregister(ptr)

  declare ptr @llvm.frameaddress.p0(i32 immarg) #1

  declare ptr @llvm.stacksave.p0() #2

  declare void @llvm.stackrestore.p0(ptr) #2

  declare void @llvm.eh.sjlj.setup.dispatch() #3

  declare ptr @llvm.eh.sjlj.lsda() #4

  declare void @llvm.eh.sjlj.callsite(i32 immarg) #4

  declare void @llvm.eh.sjlj.functioncontext(ptr) #3

  attributes #0 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
  attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
  attributes #2 = { nocallback nofree nosync nounwind willreturn }
  attributes #3 = { nounwind }
  attributes #4 = { nounwind memory(none) }

  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 18.0.0git (git@github.com:redstar/llvm-m88k.git 66e739a8f7c1129e22469c7d124dbb2a8482cf49)"}
  !6 = !{!7, !7, i64 0}
  !7 = !{!"int", !8, i64 0}
  !8 = !{!"omnipotent char", !9, i64 0}
  !9 = !{!"Simple C/C++ TBAA"}
  !10 = !{!11, !7, i64 20}
  !11 = !{!"", !8, i64 0, !7, i64 20, !7, i64 24, !8, i64 28}
  !12 = !{!11, !7, i64 24}

...
---
name:            sha_init
alignment:       4
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$r2' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $r2

    ; CHECK-LABEL: name: sha_init
    ; CHECK: liveins: $r2, $r30
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $r31 = frame-setup SUBUri $r31, 16
    ; CHECK-NEXT: frame-setup STriw killed $r30, $r31, 0 :: (store (s32) into %stack.0, align 16)
    ; CHECK-NEXT: $r30 = frame-setup ADDUri $r31, 0
    ; CHECK-NEXT: renamable $r3 = ORriu $r0, 26437
    ; CHECK-NEXT: renamable $r3 = ORri killed renamable $r3, 8961
    ; CHECK-NEXT: renamable $r4 = ORriu $r0, 61389
    ; CHECK-NEXT: renamable $r4 = ORri killed renamable $r4, 43913
    ; CHECK-NEXT: renamable $r5 = ORriu $r0, 39098
    ; CHECK-NEXT: renamable $r5 = ORri killed renamable $r5, 56574
    ; CHECK-NEXT: renamable $r6 = ORriu $r0, 4146
    ; CHECK-NEXT: renamable $r6 = ORri killed renamable $r6, 21622
    ; CHECK-NEXT: renamable $r7 = ORriu $r0, 50130
    ; CHECK-NEXT: renamable $r7 = ORri killed renamable $r7, 57840
    ; CHECK-NEXT: STriw killed renamable $r3, renamable $r2, 0 :: (store (s32) into %ir.sha_info, !tbaa !6)
    ; CHECK-NEXT: STriw killed renamable $r4, renamable $r2, 4 :: (store (s32) into %ir.arrayidx2, !tbaa !6)
    ; CHECK-NEXT: STriw killed renamable $r5, renamable $r2, 8 :: (store (s32) into %ir.arrayidx4, !tbaa !6)
    ; CHECK-NEXT: STriw killed renamable $r6, renamable $r2, 12 :: (store (s32) into %ir.arrayidx6, !tbaa !6)
    ; CHECK-NEXT: STriw killed renamable $r7, renamable $r2, 16 :: (store (s32) into %ir.arrayidx8, !tbaa !6)
    ; CHECK-NEXT: STriw $r0, renamable $r2, 20 :: (store (s32) into %ir.count_lo, !tbaa !10)
    ; CHECK-NEXT: STriw $r0, killed renamable $r2, 24 :: (store (s32) into %ir.count_hi, !tbaa !12)
    ; CHECK-NEXT: $r30 = LDriw $r31, 0 :: (load (s32) from %stack.0, align 16)
    ; CHECK-NEXT: $r31 = frame-destroy ADDUri $r31, 16
    ; CHECK-NEXT: RET
    renamable $r3 = ORriu $r0, 26437
    renamable $r3 = ORri killed renamable $r3, 8961
    renamable $r4 = ORriu $r0, 61389
    renamable $r4 = ORri killed renamable $r4, 43913
    renamable $r5 = ORriu $r0, 39098
    renamable $r5 = ORri killed renamable $r5, 56574
    renamable $r6 = ORriu $r0, 4146
    renamable $r6 = ORri killed renamable $r6, 21622
    renamable $r7 = ORriu $r0, 50130
    renamable $r7 = ORri killed renamable $r7, 57840
    STriw killed renamable $r3, renamable $r2, 0 :: (store (s32) into %ir.sha_info, !tbaa !6)
    STriw killed renamable $r4, renamable $r2, 4 :: (store (s32) into %ir.arrayidx2, !tbaa !6)
    STriw killed renamable $r5, renamable $r2, 8 :: (store (s32) into %ir.arrayidx4, !tbaa !6)
    STriw killed renamable $r6, renamable $r2, 12 :: (store (s32) into %ir.arrayidx6, !tbaa !6)
    STriw killed renamable $r7, renamable $r2, 16 :: (store (s32) into %ir.arrayidx8, !tbaa !6)
    STriw $r0, renamable $r2, 20 :: (store (s32) into %ir.count_lo, !tbaa !10)
    STriw $r0, killed renamable $r2, 24 :: (store (s32) into %ir.count_hi, !tbaa !12)
    RET

...
