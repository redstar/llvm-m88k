; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=m88k-openbsd -global-isel -stop-after=irtranslator -verify-machineinstrs < %s | FileCheck %s

define void @f1() {
  ; CHECK-LABEL: name: f1
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   RET
  ret void
}

define void @callf1() {
  ; CHECK-LABEL: name: callf1
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   BSR @f1, csr_m88k, implicit-def $r1
  ; CHECK-NEXT:   RET
  call void() @f1()
  ret void
}

define void @f2(i32 %a) {
  ; CHECK-LABEL: name: f2
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   RET
  ret void
}

define void @callf2() {
  ; CHECK-LABEL: name: callf2
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   $r2 = COPY [[C]](s32)
  ; CHECK-NEXT:   BSR @f2, csr_m88k, implicit-def $r1, implicit $r2
  ; CHECK-NEXT:   RET
  call void(i32) @f2(i32 1)
  ret void
}

define i32 @f3(i32 %a) {
  ; CHECK-LABEL: name: f3
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   $r2 = COPY [[COPY]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  ret i32 %a
}

define i32 @callf3() {
  ; CHECK-LABEL: name: callf3
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   $r2 = COPY [[C]](s32)
  ; CHECK-NEXT:   BSR @f3, csr_m88k, implicit-def $r1, implicit $r2, implicit-def $r2
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   $r2 = COPY [[COPY]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  %res = call i32(i32) @f3(i32 1)
  ret i32 %res
}

define i32 @f4(i32 %a, i32 %b) {
  ; CHECK-LABEL: name: f4
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[COPY1]]
  ; CHECK-NEXT:   $r2 = COPY [[AND]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  %res = and i32 %a, %b
  ret i32 %res
}

define i32 @callf4() {
  ; CHECK-LABEL: name: callf4
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   $r2 = COPY [[C]](s32)
  ; CHECK-NEXT:   $r3 = COPY [[C1]](s32)
  ; CHECK-NEXT:   BSR @f4, csr_m88k, implicit-def $r1, implicit $r2, implicit $r3, implicit-def $r2
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   $r2 = COPY [[COPY]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  %res = call i32(i32, i32) @f4(i32 1, i32 2)
  ret i32 %res
}

define i16 @f5(i16 %a, i16 %b) {
  ; CHECK-LABEL: name: f5
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s32)
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s16) = G_AND [[TRUNC]], [[TRUNC1]]
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[AND]](s16)
  ; CHECK-NEXT:   $r2 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  %res = and i16 %a, %b
  ret i16 %res
}

define i64 @f6(i64 %a, i64 %b) {
  ; CHECK-LABEL: name: f6
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2, $r3, $r4, $r5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[MV1:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY2]](s32), [[COPY3]](s32)
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s64) = G_AND [[MV]], [[MV1]]
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[AND]](s64)
  ; CHECK-NEXT:   $r3 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $r2 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   RET implicit $r3, implicit $r2
  %res = and i64 %a, %b
  ret i64 %res
}

define i64 @f7(i32 %a, i64 %b) {
  ; CHECK-LABEL: name: f7
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2, $r4, $r5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY1]](s32), [[COPY2]](s32)
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[MV]](s64)
  ; CHECK-NEXT:   $r3 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $r2 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   RET implicit $r3, implicit $r2
  ret i64 %b
}

define float @f8(float %a, float %b) {
  ; CHECK-LABEL: name: f8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2, $r3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[FADD:%[0-9]+]]:_(s32) = G_FADD [[COPY]], [[COPY1]]
  ; CHECK-NEXT:   $r2 = COPY [[FADD]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  %res = fadd float %a, %b
  ret float %res
}

define float @callf8() {
  ; CHECK-LABEL: name: callf8
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 1.000000e+00
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_FCONSTANT float 2.000000e+00
  ; CHECK-NEXT:   $r2 = COPY [[C]](s32)
  ; CHECK-NEXT:   $r3 = COPY [[C1]](s32)
  ; CHECK-NEXT:   BSR @f8, csr_m88k, implicit-def $r1, implicit $r2, implicit $r3, implicit-def $r2
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   $r2 = COPY [[COPY]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  %res = call float(float, float) @f8(float 1.0, float 2.0)
  ret float %res
}

define double @f9(double %a, double %b) {
  ; CHECK-LABEL: name: f9
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2, $r3, $r4, $r5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[MV1:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY2]](s32), [[COPY3]](s32)
  ; CHECK-NEXT:   [[FADD:%[0-9]+]]:_(s64) = G_FADD [[MV]], [[MV1]]
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[FADD]](s64)
  ; CHECK-NEXT:   $r3 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $r2 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   RET implicit $r3, implicit $r2
  %res = fadd double %a, %b
  ret double %res
}

define double @callf9() {
  ; CHECK-LABEL: name: callf9
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_FCONSTANT double 1.000000e+00
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s64) = G_FCONSTANT double 2.000000e+00
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
  ; CHECK-NEXT:   [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C1]](s64)
  ; CHECK-NEXT:   $r3 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $r2 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   $r5 = COPY [[UV2]](s32)
  ; CHECK-NEXT:   $r4 = COPY [[UV3]](s32)
  ; CHECK-NEXT:   BSR @f9, csr_m88k, implicit-def $r1, implicit $r3, implicit $r2, implicit $r5, implicit $r4, implicit-def $r3, implicit-def $r2
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   [[UV4:%[0-9]+]]:_(s32), [[UV5:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[MV]](s64)
  ; CHECK-NEXT:   $r3 = COPY [[UV4]](s32)
  ; CHECK-NEXT:   $r2 = COPY [[UV5]](s32)
  ; CHECK-NEXT:   RET implicit $r3, implicit $r2
  %res = call double(double, double) @f9(double 1.0, double 2.0)
  ret double %res
}

define i32 @f10(i32 %a, i32 %b, i32 %c, i32 %d, i32 %e, i32 %f, i32 %g, i32 %h, i32 %i, i32 %j) {
  ; CHECK-LABEL: name: f10
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r5
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (load (s32) from %fixed-stack.1, align 16)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX1]](p0) :: (load (s32) from %fixed-stack.0)
  ; CHECK-NEXT:   $r2 = COPY [[COPY]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  ret i32 %a
}

define i32 @callf11() {
  ; CHECK-LABEL: name: callf11
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
  ; CHECK-NEXT:   [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
  ; CHECK-NEXT:   [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
  ; CHECK-NEXT:   [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
  ; CHECK-NEXT:   [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
  ; CHECK-NEXT:   [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 9
  ; CHECK-NEXT:   [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 10
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $r31
  ; CHECK-NEXT:   [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C10]](s32)
  ; CHECK-NEXT:   G_STORE [[C8]](s32), [[PTR_ADD]](p0) :: (store (s32) into stack, align 16)
  ; CHECK-NEXT:   [[C11:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
  ; CHECK-NEXT:   [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C11]](s32)
  ; CHECK-NEXT:   G_STORE [[C9]](s32), [[PTR_ADD1]](p0) :: (store (s32) into stack + 4)
  ; CHECK-NEXT:   $r2 = COPY [[C]](s32)
  ; CHECK-NEXT:   $r3 = COPY [[C1]](s32)
  ; CHECK-NEXT:   $r4 = COPY [[C2]](s32)
  ; CHECK-NEXT:   $r5 = COPY [[C3]](s32)
  ; CHECK-NEXT:   $r6 = COPY [[C4]](s32)
  ; CHECK-NEXT:   $r7 = COPY [[C5]](s32)
  ; CHECK-NEXT:   $r8 = COPY [[C6]](s32)
  ; CHECK-NEXT:   $r9 = COPY [[C7]](s32)
  ; CHECK-NEXT:   BSR @f10, csr_m88k, implicit-def $r1, implicit $r2, implicit $r3, implicit $r4, implicit $r5, implicit $r6, implicit $r7, implicit $r8, implicit $r9, implicit-def $r2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r2
  ; CHECK-NEXT:   $r2 = COPY [[COPY1]](s32)
  ; CHECK-NEXT:   RET implicit $r2
  %res = call i32(i32,i32,i32,i32,i32,i32,i32,i32,i32,i32) @f10(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10)
  ret i32 %res
}
